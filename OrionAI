using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.MLAgents;
using Unity.MLAgents.Sensors;
using Unity.MLAgents.Actuators;

public class AdaptiveEnemyAI : Agent
{
    public Transform player;
    public float moveSpeed = 3f;
    public float attackRange = 2f;
    public float attackCooldown = 2f;
    private float lastAttackTime;

    public override void OnEpisodeBegin()
    {
        transform.position = new Vector3(Random.Range(-5f, 5f), 0, Random.Range(-5f, 5f));
        lastAttackTime = Time.time;
    }

    public override void CollectObservations(VectorSensor sensor)
    {
        sensor.AddObservation(transform.position);
        sensor.AddObservation(player.position);
        sensor.AddObservation(Vector3.Distance(transform.position, player.position));
    }

    public override void OnActionReceived(ActionBuffers actions)
    {
        float moveX = actions.ContinuousActions[0];
        float moveZ = actions.ContinuousActions[1];
        
        Vector3 moveDir = new Vector3(moveX, 0, moveZ).normalized;
        transform.position += moveDir * moveSpeed * Time.deltaTime;

        if (Vector3.Distance(transform.position, player.position) < attackRange && Time.time - lastAttackTime >= attackCooldown)
        {
            Attack();
            SetReward(1.0f);  // Recompensa por atacar
        }
        else
        {
            SetReward(-0.01f);  // Penalizaci√≥n leve por no hacer nada
        }
    }

    void Attack()
    {
        Debug.Log("Enemy attacks!");
        lastAttackTime = Time.time;
    }

    public override void Heuristic(in ActionBuffers actionsOut)
    {
        var continuousActions = actionsOut.ContinuousActions;
        continuousActions[0] = Input.GetAxis("Horizontal");
        continuousActions[1] = Input.GetAxis("Vertical");
    }
}
